(()=>{var n=class{constructor(){this.ctx=null,this.audioBuffer={},this.setupContext()}getFilePath(){let e="/tutorials/midi/audio",t=PQ_MIDI.config&&PQ_MIDI.config.audio&&PQ_MIDI.config.audio.path;return t?(e=PQ_MIDI.config.audio.path,e.charAt(e.length-1)=="/"&&e.slice(0,-1),e):e}setupContext(){const e=window.AudioContext||window.webkitAudioContext;this.ctx=new e,document.addEventListener("visibilitychange",e=>{document.visibilityState==="visible"?this.ctx.resume():this.ctx.suspend()})}getContext(){return this.ctx}getAudioForPitch(e){return this.audioBuffer[e]}hasResource(e){return e in this.audioBuffer}createGainNodes(e){const t=[];for(let n=0;n<e;n++){const s=this.ctx.createGain();s.connect(this.ctx.destination),t.push(s)}return t}checkAndLoadResources(e){let t=[];for(const n of e){if(this.hasResource(n))continue;t.push(this.loadResource(n))}const n=t.length>0;if(n){const e=new Promise(e=>{setTimeout(()=>{e("resolved")},50)});t.push(e)}return Promise.all(t)}loadResource(e){const s=e.replace("#","p"),o=this.getFilePath()+"/"+s+".ogg",t=new XMLHttpRequest;t.open("GET",o,!0),t.responseType="arraybuffer";const n=this;return new Promise((s,o)=>{t.onload=function(){let t=this.response.byteLength<=24;if(t)return;n.getContext().decodeAudioData(this.response,function(t){n.audioBuffer[e]=t,s(!0)},function(e){console.warn(e),o(!1)})},t.onerror=function(){o(!1)},t.send()})}playSound(e,t,n){this.ctx.state==="suspended"&&this.ctx.resume();var s=this.ctx.createBufferSource();s.buffer=this.getAudioForPitch(t.pitch),s.connect(n),s.start();const i=this.ctx.currentTime,o=i+t.duration;s.stop(o);const a=t.convertVolumeToGain(t.volumeStart),r=t.convertVolumeToGain(t.volumeEnd);return n.gain.exponentialRampToValueAtTime(a,i+.03),n.gain.setValueAtTime(r,o-.03),t.pitch!="M"&&n.gain.exponentialRampToValueAtTime(1e-4,o),s}},s=new n,e=s,o=class{constructor(e={}){this.pitchInput="absolute",this.timeInput="absolute",this.tempoBPM=120,this.timeSignature="4/4",this.strict=!1,this.transpose=0,this.metronome=!1,this.metronomeVolume=66;for(var t in e){if(!e[t])continue;this[t]=e[t]}this.generateNotes()}generateNotes(){const e=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],t=[1,2,3,4,5,6];this.allNotes=[];for(let n=0;n<t.length;n++)for(let s=0;s<e.length;s++)this.allNotes.push(e[s]+t[n].toString())}getAllNotes(){return this.allNotes}clampNote(e){return Math.max(Math.min(e,this.allNotes.length-1),0)}getNoteIndex(e){return this.allNotes.indexOf(e)}useMetronome(){return this.metronome}convertPitchInput(e,t){const s=this.getNoteIndex(e);let o=s==-1;if(o)return e;let n=this.pitchInput;if(t==null&&n=="relative"&&(n="absolute"),n=="absolute"){let t=this.clampNote(this.getNoteIndex(e)+this.transpose);return this.allNotes[t]}if(n=="relative"){let n=this.getNoteIndex(t),s=e[0]=="^",o=e[0]=="_";return s?n+=parseInt(e.substring(1)):o&&(n-=parseInt(e.substring(1))),n=this.clampNote(n),this.allNotes[n]}}convertTimeInput(e,t){let n=this.timeInput;if(t==null&&n=="relative"&&(n="absolute"),n=="absolute")return e.length<=0&&(e="1"),parseInt(e)*this.getSecondsPerBeat();if(n=="relative"){e.length<=0&&(e="^0");let n=parseFloat(t)/this.getSecondsPerBeat(),s=e[0]=="^",o=e[0]=="_";return s&&(e=n+parseInt(e.substring(1))),o&&(e=n-parseInt(e.substring(1))),e=Math.min(Math.max(parseInt(e),1),32),e*this.getSecondsPerBeat()}if(n=="traditional"){e.length<=0&&(e="4");let s=this.getSecondsPerFullNote(),t=parseInt(e.replace(".","")),n=1/t;return e.charAt(e.length-1)=="."&&(n+=1/(t*2)),n*s}}getPrettyTempoBPM(){let e=this.tempoBPM;for(;e>200;)e/=2;for(;e<40;)e*=2;return Math.round(e)}getTempoBPM(){return this.tempoBPM}getSecondsPerBeat(){return 60/this.tempoBPM}getSecondsPerFullNote(){return this.getSecondsPerBeat()*this.getBeatType()}getSecondsPerMeasure(){return this.getSecondsPerBeat()*this.getBeatsPerMeasure()}getBeatsPerMeasure(){return parseInt(this.timeSignature.split("/")[0])}getBeatType(){return parseInt(this.timeSignature.split("/")[1])}isStartOfMeasure(e){const t=e/this.getSecondsPerMeasure(),n=Math.abs(Math.round(t)-t)<=.075;return n}isMeasureCorrect(e=!1,t){return!e||!this.strict||this.isStartOfMeasure(t)}areTracksAligned(e){if(!this.strict)return!0;let t=-1;for(const n of e){const s=n[n.length-1].timeEnd;if(t>0&&Math.abs(s-t)>.05)return!1;t=s}return!0}},i=class{constructor(e,t){this.colorOffset=Math.round(Math.random()*360),this.colorInterval=360/t;for(var n in e){if(!e[n])continue;this[n]=e[n]}this.font={light:"#BBBBBB",dark:"#999999",size:30,family:"Dosis"},Object.assign(this.font,e.font||{}),this.pitch={barLight:"transparent",barDark:"#DDDDDD",emptyPitchesAround:2,textMargin:20,shadowSize:10,shadowColor:"#666666",verticalScale:1},Object.assign(this.pitch,e.pitch||{}),this.time={lineWidth:6,textMargin:20,cursorColor:"#0000FF",cursorWidth:6},Object.assign(this.time,e.time||{})}getTrackColor(e,t=0){const n=(this.colorOffset+this.colorInterval*e)%360,s=100,o=50+t,i="hsl("+n+", "+s+"%, "+o+"%)";return i}},a=class{constructor(e,t,n,s){this.canvas=e,this.visualConfig=s,this.pitchGrid={},this.timeGrid={},this.setupGrid(t,n),this.refresh(t)}setupGrid(e,t){const r=this.visualConfig.pitch.emptyPitchesAround,n=e.getPitches(r,t).reverse(),s=n.length,c=t.getAllNotes().length;let o=60-25*(s/c);o*=this.visualConfig.pitch.verticalScale,this.canvas.height=o*s,this.pitchGrid={pitches:n,barHeight:this.canvas.height/n.length,barWidth:this.canvas.width};const i=e.getDuration(),a=t.getSecondsPerMeasure();this.timeGrid={barHeight:this.canvas.height,subdivisions:t.getBeatsPerMeasure(),pixelsPerSecond:this.pitchGrid.barWidth/i,numMeasures:i/a,secondsPerMeasure:a},this.timeGrid.pixelsPerMeasure=this.pitchGrid.barWidth/this.timeGrid.numMeasures}refresh(e,t=null){this.clearCanvas(),this.drawPitchGrid(e),this.drawTimeGrid(e),this.drawTracks(e,t),this.drawTimeCursor(t)}clearCanvas(){const e=this.canvas.getContext("2d");e.clearRect(0,0,this.canvas.width,this.canvas.height)}drawTimeCursor(e=null){const t=this.canvas.getContext("2d");let n=e?e.time:0,s=this.visualConfig.time.cursorWidth;t.fillStyle=this.visualConfig.time.cursorColor,t.fillRect(n*this.timeGrid.pixelsPerSecond,0,s,this.canvas.height)}drawPitchGrid(){const t=this.canvas.getContext("2d");let n=this.pitchGrid.barHeight,o=this.pitchGrid.barWidth,i=this.visualConfig.pitch.textMargin,s=this.visualConfig.font.size;for(const[e,a]of Object.entries(this.pitchGrid.pitches))t.fillStyle=e%2==0?this.visualConfig.pitch.barLight:this.visualConfig.pitch.barDark,t.fillRect(0,e*n,o,n),t.font=s+"px "+this.visualConfig.font.family,t.fillStyle=e%2==0?this.visualConfig.font.light:this.visualConfig.font.dark,t.fillText(a,i,e*n+s+.5*(n-s))}drawTimeGrid(){const t=this.canvas.getContext("2d");t.font=this.visualConfig.font.size+"px "+this.visualConfig.font.family,t.fillStyle=this.visualConfig.font.light;const n=this.visualConfig.time.textMargin,s=this.visualConfig.font.size;for(let e=0;e<this.timeGrid.numMeasures;e++)for(let o=0;o<this.timeGrid.subdivisions;o++){let r=o/this.timeGrid.subdivisions,i=(e+r)*this.timeGrid.pixelsPerMeasure,a=this.visualConfig.time.lineWidth;if(o!=0&&(a*=.33),t.fillRect(i,0,a,this.timeGrid.barHeight),o==0&&e!=0){let o=this.timeGrid.secondsPerMeasure*e;o=Math.round(o*10)/10,t.fillText(o+"s",i+n,0+s)}}}drawTracks(e,t=null){for(const[n,s]of Object.entries(e.getNotes()))this.drawTrack(n,s,t)}drawTrack(e,t,n=null){let s=this.canvas.getContext("2d");const o=this.pitchGrid.barHeight,i=this.timeGrid.pixelsPerSecond;let a=n?n.time:-1;for(const n of t){if(!n.useVisual)continue;s.fillStyle=this.visualConfig.getTrackColor(e),s.shadowBlur=this.visualConfig.pitch.shadowSize,s.shadowColor=this.visualConfig.pitch.shadowColor;let d=n.timeStart<=a&&n.timeEnd>=a;d&&(s.fillStyle=this.visualConfig.getTrackColor(e,30),s.shadowColor="black");const u=this.pitchGrid.pitches.indexOf(n.pitch),r=n.duration*i,c=n.timeStart*i,l=u*o;s.fillRect(c,l,r,o),s.lineWidth=4,s.strokeStyle=this.visualConfig.getTrackColor(e,-30),s.strokeRect(c,l,r,o)}s.shadowBlur=0,s.shadowColor="transparent"}},t=class{constructor(e,t,n){this.pitch=e,this.duration=n,this.timeStart=t,this.timeEnd=t+n,this.useAudio=!0,this.useVisual=!0,this.maxVolume=100,this.volumeStart=this.maxVolume,this.volumeEnd=this.maxVolume,this.shouldBeSilent()&&(this.useAudio=!1),this.shouldBeInvisible()&&(this.useVisual=!1)}setVisual(e){this.useVisual=e}setAudio(e){this.useAudio=e}addTime(e){this.timeEnd+=e,this.duration+=e}setVolume(e){e=Math.max(Math.min(parseFloat(e),this.maxVolume),0),this.volumeStart=e,this.volumeEnd=e}convertVolumeToGain(e){return e/this.maxVolume}shouldBeInvisible(){return this.pitch=="R"}shouldBeSilent(){return this.pitch=="R"}},r=class{constructor(e,t){this.tracksParsed=[],this.duration=0,this.feedback=[],this.parse(e,t)}parse(e,n){this.tracksParsed=[],e=e.replace(/  |\r\n|\n|\r/gm,"");const o=n.getSecondsPerBeat(),s=e.split(":");for(const[d,i]of Object.entries(s)){const u=i.length<=0;if(u)continue;let e=0,o=[];const a=i.split(" "),h=a.length<=0;if(h)continue;let r=null,c=null,l=null;for(const i of a){const v=i.length<=0||!i.includes("/");if(v)continue;const m=i=="|";if(n.isMeasureCorrect(m,e)||this.addFeedback("Error! Invalid measure. Track "+d+"; Time "+e),m)continue;const s=i.split("/"),f=s[0],b=s[1],p=n.convertPitchInput(f,r),u=n.convertTimeInput(b,c);r=p,c=u;const h=new t(p,e,u),j=s.length>2;if(j){const e=s[2].length<=0?l:parseInt(s[2]);h.setVolume(e)}l=h.volumeEnd;const g=f=="";g&&o[o.length-1].addTime(u),g||o.push(h),e+=u}this.tracksParsed.push(o)}n.useMetronome()&&this.addMetronomeTrack(n),n.areTracksAligned(this.tracksParsed)||this.addFeedback("Error! Tracks have different lengths.")}addMetronomeTrack(e){let o=[],a=this.getDuration(),s=e.getSecondsPerBeat(),i=e.metronomeVolume,n=0;for(;n+s-.01<a;){const r=e.isStartOfMeasure(n),c=r?i:.38*i,l="M",a=new t(l,n,s);a.setVolume(c),a.setVisual(!1),o.push(a),n+=s}this.tracksParsed.push(o)}addFeedback(e){this.feedback.push(e)}getNotes(){return this.tracksParsed}getUniquePitches(){let e=new Set;for(const t of this.tracksParsed)for(const n of t){if(!n.useAudio)continue;e.add(n.pitch)}return Array.from(e)}getPitches(e=0,t){let n=1/0,s=-1;for(const e of this.tracksParsed)for(const i of e){let o=t.getNoteIndex(i.pitch);if(o==-1)continue;o<n&&(n=o),o>s&&(s=o)}return n=t.clampNote(n-e),s=t.clampNote(s+e+1),t.getAllNotes().slice(n,s)}getDuration(){if(this.duration>0)return this.duration;let e=0;for(const t of this.tracksParsed){let n=t[t.length-1].timeEnd;if(n<=e)continue;e=n}return this.duration=e,this.duration}},c=class{constructor(t,n,s,c){this.id=t,this.metadata=c,this.btn=c.getElementsByClassName("midi-button-play")[0],this.enabled=!0,this.playing=!1,this.audio=[],this.gain=[],this.time=0,PQ_MIDI.config||(PQ_MIDI.config={}),PQ_MIDI.config.audio||(PQ_MIDI.config.audio={});let u=n.innerHTML.trim(),h={pitchInput:n.dataset.pitchinput,timeInput:n.dataset.timeinput,tempoBPM:parseInt(n.dataset.tempo),timeSignature:n.dataset.time,strict:n.dataset.strict,transpose:parseInt(n.dataset.transpose),metronome:n.dataset.metronome,metronomeVolume:PQ_MIDI.config.audio.metronomeVolume||66},l=new o(h);c.getElementsByClassName("midi-tempo-label")[0].innerHTML=l.getPrettyTempoBPM(),this.parser=new r(u,l),this.tracks=this.parser.getNotes(),this.duration=this.parser.getDuration();const d=this.tracks.length;this.gain=e.createGainNodes(d);const m=new i(PQ_MIDI.customConfig||{},d);this.visualizer=new a(s,this.parser,l,m),this.btn.addEventListener("click",this.toggle.bind(this)),this.feedbackLabel=c.getElementsByClassName("midi-parse-feedback")[0],this.feedbackLabel.innerHTML=this.parser.feedback}async toggle(){if(!this.enabled)return;this.enabled=!1,this.feedbackLabel.innerHTML="Downloading audio ...",await e.checkAndLoadResources(this.parser.getUniquePitches()),this.feedbackLabel.innerHTML=this.parser.feedback,this.enabled=!0,this.playing?this.stop():this.play()}cloneTracks(){const e=this.parser.getNotes();this.tracks=[];for(let t=0;t<e.length;t++)this.tracks.push(e[t].slice())}play(){this.playing=!0,this.audio=[],this.cloneTracks(),this.onUpdate(),window.requestAnimationFrame(this.progress.bind(this))}progress(){if(!this.playing)return;this.time+=1/60;const e=this.time>=this.duration;if(e){this.stop();return}this.onUpdate(),window.requestAnimationFrame(this.progress.bind(this))}stop(){this.playing=!1,this.time=0;for(const e of this.audio)e.stop();this.audio=[],this.visualizer.refresh(this.parser,null)}onUpdate(){this.visualizer.refresh(this.parser,this);for(const[n,e]of Object.entries(this.tracks)){if(e.length<=0)continue;const t=e[0];if(t.timeStart>this.time)continue;this.playSound(n,t),e.shift()}}playSound(t,n){if(!n.useAudio)return;const s=e.playSound(t,n,this.gain[t]);this.audio.push(s)}};window.PQ_MIDI={},window.addEventListener("load",function(){const t=[],e=document.getElementsByClassName("midi-player");for(let n=0;n<e.length;n++){const s=e[n].getElementsByClassName("midi-data")[0],o=e[n].getElementsByClassName("midi-canvas")[0],i=e[n].getElementsByClassName("midi-player-metadata")[0];t.push(new c(n,s,o,i))}})})()